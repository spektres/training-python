"""бстрактные методы содержат только определение метода без 
реализации. Это эдакие заглушки, которые нужно реализовать 
в дочернем классе. Часто в абстрактных методах 
возбуждают исключение, чтобы напомнить о необходимости 
реализовать метод, например: """

class Sarnple: 
    def func(self, х, у): 
        raise NotImplementedError("Not irnplernented") 
    def rnsurn(self, х, у): 
        return х + у 
# В данном случае метод func() является абстрактным.
# Никаких декораторов не используется.

"""В версии 2.6 появился модуль аbс, содержащий декоратор @abstractmethod. Что дает 
нам использование этого декоратора? А то, что вам не нужно вызывать 
самому исключение, данный декоратор сгенерирует ошибку 
TypeError при использовании не переопределенного абстрактного 
метода. Лучше использовать первый способ, но не привести пример 
с использованием @abstractmethod просто невозможно: """

from abc import abstractmethod

class Sample:
    @abstractmethod
    def func(self, x, y):
        pass
    def msum(self, x, y):
        return x + y